syntax = "proto3";

package config;

import "google/protobuf/duration.proto";

option go_package = "github.com/moon-monitor/moon/pkg/config;config";
option java_multiple_files = true;
option java_package = "com.moon.config";

enum Environment {
  UNKNOWN = 0;
  DEV = 1;
  TEST = 2;
  PROD = 3;
}

// http服务配置
message HTTPServer {
  // 网络类型
  string network = 1;
  // 服务地址
  string addr = 2;
  // 读写超时时间
  google.protobuf.Duration timeout = 3;
}

// grpc服务配置
message GRPCServer {
  // 网络类型
  string network = 1;
  // 服务地址
  string addr = 2;
  // 读写超时时间
  google.protobuf.Duration timeout = 3;
}

// jwt配置
message JWT {
  // 签名密钥
  string sign_key = 1;
  // 签发者
  string issuer = 2;
  // 有效期
  google.protobuf.Duration expire = 4;
}

// 数据库配置
message Database {
  enum Driver {
    // mysql
    MYSQL = 0;
    // postgres
    POSTGRES = 1;
    // sqlite
    SQLITE = 2;
    // sqlserver
    SQLSERVER = 3;
    // TiDB
    TIDB = 4;
    // Clickhouse
    CLICKHOUSE = 5;
  }
  // 驱动， 支持gorm即可
  Driver driver = 1;
  // 数据库连接串
  string dsn = 2;
  // 是否开启调试
  bool debug = 3;
}

// 缓存配置
message Cache {
  enum Driver {
    // redis
    REDIS = 0;
    // mini redis
    MINI_REDIS = 1;
  }
  Driver driver = 1;
  // 网络类型
  string network = 2;
  // 地址
  string addr = 3;
  // 密码
  string password = 4;
  // 数据库
  uint32 db = 5;
  // 读写超时
  google.protobuf.Duration read_timeout = 6;
  google.protobuf.Duration write_timeout = 7;
  // 连接超时
  google.protobuf.Duration dial_timeout = 8;
}

// 微服务配置
message MicroServer {
  enum Network {
    // http
    HTTP = 0;
    // https
    HTTPS = 1;
    // grpc
    GRPC = 2;
  }
  // 服务地址
  string endpoint = 1;
  // 密钥
  optional string secret = 2;
  // 超时时间
  optional google.protobuf.Duration timeout = 3;
  // 网络类型， http, https, grpc
  Network network = 4;
  // node版本
  string nodeVersion = 5;
  // name 服务名
  string name = 6;
}

// 链路追踪配置
message Tracer {
  enum Driver {
    // jaeger
    JAEGER = 0;
  }
  // jaeger配置
  message Jaeger {
    // 端点
    string endpoint = 1;
  }
  // 驱动， 支持jaeger
  Driver driver = 1;
  // jaeger配置
  Jaeger jaeger = 2;
}

// ETCD数据源配置
message ETCD {
  // 端点
  repeated string endpoints = 1;
  // 连接超时
  optional google.protobuf.Duration timeout = 2;
  // 用户名
  optional string username = 3;
  // 密码
  optional string password = 4;
}

// 服务注册发现配置
message Registry {
  enum Driver {
    // etcd
    ETCD = 0;
  }
  // 类型， 名称和数据源保持一致，例如etcd
  Driver driver = 1;
  // 数据源
  ETCD etcd = 2;
}

// 邮件发送配置
message EmailConfig {
  // 用户
  string user = 1;
  // 发送的邮箱密码
  string pass = 2;
  // 发送的邮箱服务器
  string host = 3;
  // 发送的邮箱端口
  uint32 port = 4;
}

message Log {
  enum Driver {
    DEFAULT = 0;
    SUGARED = 1;
  }
  enum Level {
    // debug
    DEBUG = 0;
    // info
    INFO = 1;
    // warn
    WARN = 2;
    // error
    ERROR = 3;
    // fatal
    FATAL = 4;
  }
  message SugaredLogConfig {
    string format = 1;
    string output = 2;
    bool disable_caller = 3;
    bool disable_stacktrace = 4;
    bool enable_color = 5;
  }
  Driver driver = 1;
  Level level = 2;
  optional SugaredLogConfig sugared = 3;
}

// oss相关

// minio
message Minio{
  string endpoint = 1;
  string accessKeyID = 2;
  string accessKeySecret = 3;
  string bucketName = 4;
  // 是否使用https
  bool secure = 5;
}

// tencent oss
message TencentOss{
  string bucketURL = 1;
  string secretID = 2;
  string secretKey = 3;
  int64  expiry = 4;
  string bucketName = 5;
  bool isPublic = 6;
  string region = 7;
}

// ali oss
message AliOss{
  string endpoint = 1;
  string accessKeyID = 2;
  string accessKeySecret = 3;
  string bucketName = 4;
}

// local
message LocalStorage{
  string  path = 1;
  string url = 2;
  string downloadPre = 3;
}

message Oss {
  enum Driver {
    MINIO = 0;
    TENCENT = 1;
    ALI = 2;
    LOCAL = 3;
  }
  // 文件大小限制
  message Limit {
    optional int64 max_byte_size = 1;
    optional int64 min_byte_size = 2;
  }
  // oss类型
  Driver driver = 1;
  Minio minio = 2;
  TencentOss tencentOss = 3;
  AliOss aliOss = 4;
  LocalStorage local = 5;
  // 文件大小
  map <string, Limit> limitSize = 6;
}

// mq配置
message Event {
  enum Driver {
    // rocketmq
    ROCKETMQ = 0;
    // mqtt
    MQTT = 1;
    // kafka
    KAFKA = 2;
  }
  // rocketmq配置
  message RocketMQ {
    // 组名
    string groupName = 1;
    // 端点
    string endpoint = 2;
    // 区域
    string region = 3;
    // 访问密钥
    string accessKey = 4;
    // 秘密密钥
    string secretKey = 5;
    // 命名空间
    string namespace = 6;
  }

  // mqtt配置
  message Mqtt {
    // broker地址
    string  broker = 1;
    // 用户名
    string  username = 2;
    // 密码
    string  password = 3;
    // client
    string clientId = 4;
    // 是否自动重连
    bool autoReconnect = 5;
    // qos  0 1 2
    int32  qos = 6;
  }

  // kafka配置
  message Kafka{
    // broker地址
    string brokers = 1;
    // topic
    string topic = 2;
    // 消费组
    string groupName = 3;
    // 策略
    string strategy = 4;
    // 用户名
    string username = 5;
    // 密码
    string password = 6;
    // 是否开启sasl
    bool saslEnable = 7;
    // version
    string version = 8;
  }
  // mq类型
  Driver driver = 1;
  // rocketmq配置
  optional RocketMQ rocketMQ = 2;
  // mqtt配置
  optional Mqtt mqtt = 3;
  // kafka配置
  optional Kafka kafka = 4;
}