syntax = "proto3";

package api.palace;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "palace/user.proto";

option go_package = "github.com/moon-monitor/moon/pkg/api/palace;palace";
option java_multiple_files = true;
option java_package = "com.api.palace";

service Auth {
	rpc GetCaptcha(GetCaptchaRequest) returns (GetCaptchaReply) {
		option (google.api.http) = {
			get: "/api/auth/captcha"
		};
	}

	rpc LoginByPassword(LoginByPasswordRequest) returns (LoginByPasswordReply) {
		option (google.api.http) = {
			post: "/api/auth/login/email"
			body: "*"
		};
	}
}

message CaptchaValidateRequest {
	string captchaId = 1 [(buf.validate.field).cel = {
		message: "captchaId is required"
		expression: "this.size() > 0"
	}];
	string answer = 2 [(buf.validate.field).cel = {
		message: "answer is required"
		expression: "this.size() > 0"
	}];
}

message GetCaptchaRequest {
	int32 width = 1 [(buf.validate.field).cel = {
		message: "width is required"
		expression: "this > 0"
	}];
	int32 height = 2 [(buf.validate.field).cel = {
		message: "height is required"
		expression: "this > 0"
	}];
}
message GetCaptchaReply {
	string captchaId = 1;
	string captchaImg = 2;
	int64 expired_seconds = 3;
}

message LoginByPasswordRequest {
	string email = 1 [(buf.validate.field).cel = {
		message: "email is required"
		expression: "this.size() > 0"
	}, (buf.validate.field).cel = {
		message: "email is invalid"
		expression: "this.isEmail()"
	}];
	string password = 2 [(buf.validate.field).cel = {
		message: "password is required"
		expression: "this.size() > 0"
	}, (buf.validate.field).cel = {
		message: "password max length is 32"
		expression: "this.size() <= 32"
	}];
	CaptchaValidateRequest captcha = 3 [(buf.validate.field).required = true];
}
message LoginByPasswordReply {
	string token = 1;
	UserItem user = 2;
}