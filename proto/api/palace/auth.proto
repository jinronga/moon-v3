syntax = "proto3";

package api.palace;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "palace/common/system.proto";
import "palace/common/system_enum.proto";
import "palace/common/common.proto";

option go_package = "github.com/moon-monitor/moon/pkg/api/palace;palace";
option java_multiple_files = true;
option java_package = "com.api.palace";

service Auth {
  rpc GetCaptcha(api.palace.common.EmptyRequest) returns (GetCaptchaReply) {
    option (google.api.http) = {
      get: "/api/auth/captcha"
    };
  }

  rpc LoginByPassword(LoginByPasswordRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/auth/login/email"
      body: "*"
    };
  }

  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailReply) {
    option (google.api.http) = {
      post: "/api/auth/verify/email"
      body: "*"
    };
  }

  rpc LoginByEmail(LoginByEmailRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/auth/login/email"
      body: "*"
    };
  }

  rpc OAuthLoginByEmail(OAuthLoginByEmailRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/auth/oauth2/login/email"
      body: "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/api/auth/logout"
      body: "*"
    };
  }

  rpc RefreshToken(api.palace.common.EmptyRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/auth/refresh"
      body: "*"
    };
  }

  rpc OAuth2List(api.palace.common.EmptyRequest) returns (OAuth2ListReply) {
    option (google.api.http) = {
      post: "/api/auth/oauth2/list"
      body: "*"
    };
  }
}

message CaptchaValidateRequest {
  string captchaId = 1 [(buf.validate.field).cel = {
    message: "captchaId is required"
    expression: "this.size() > 0"
  }];
  string answer = 2 [(buf.validate.field).cel = {
    message: "answer is required"
    expression: "this.size() > 0"
  }];
}

message GetCaptchaReply {
  string captchaId = 1;
  string captchaImg = 2;
  int64 expired_seconds = 3;
}

message LoginByPasswordRequest {
  string email = 1 [(buf.validate.field).cel = {
    message: "email is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "email is invalid"
    expression: "this.isEmail()"
  }];
  string password = 2 [(buf.validate.field).cel = {
    message: "password is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "password max length is 32"
    expression: "this.size() <= 32"
  }];
  CaptchaValidateRequest captcha = 3 [(buf.validate.field).required = true];
}
message LoginByEmailRequest {
  string username = 1 [(buf.validate.field).cel = {
    message: "username is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "username max length is 32"
    expression: "this.size() <= 32"
  }];
  string email = 2 [(buf.validate.field).cel = {
    message: "email is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "email is invalid"
    expression: "this.isEmail()"
  }];
  string code = 3 [(buf.validate.field).cel = {
    message: "code is required"
    expression: "this.size() > 0"
  }];
  string nickname = 4 [(buf.validate.field).cel = {
    message: "nickname max length is 32"
    expression: "this.size() <= 32"
  }];
  string remark = 5 [(buf.validate.field).cel = {
    message: "remark max length is 200"
    expression: "this.size() <= 200"
  }];
  api.palace.common.Gender gender = 6;
}
message OAuthLoginByEmailRequest {
  uint32 oauthID = 1 [(buf.validate.field).cel = {
    message: "oauthID is required"
    expression: "this > 0"
  }];
  string email = 2 [(buf.validate.field).cel = {
    message: "email is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "email is invalid"
    expression: "this.isEmail()"
  }];
  string code = 3 [(buf.validate.field).cel = {
    message: "code is required"
    expression: "this.size() > 0"
  }];
  string token = 4 [(buf.validate.field).cel = {
    message: "token is required"
    expression: "this.size() > 0"
  }];
  int32 app = 5 [(buf.validate.field).cel = {
    message: "app is required"
    expression: "this > 0"
  }];
}
message LoginReply {
  string token = 1;
  int64 expired_seconds = 2;
  api.palace.common.UserBaseItem user = 3;
}

message LogoutRequest {
  string redirect = 1;
}
message LogoutReply {
  string redirect = 1;
}

message VerifyEmailRequest {
  string email = 1 [(buf.validate.field).cel = {
    message: "email is required"
    expression: "this.size() > 0"
  }, (buf.validate.field).cel = {
    message: "email is invalid"
    expression: "this.isEmail()"
  }];
  CaptchaValidateRequest captcha = 2 [(buf.validate.field).required = true];
}
message VerifyEmailReply {
  int64 expired_seconds = 2;
}

message OAuth2ListReply {
  message OAuthItem {
    // 图标
    string icon = 1;
    // 标签
    string label = 2;
    // 重定向地址
    string redirect = 3;
  }

  repeated OAuthItem items = 1;
}
