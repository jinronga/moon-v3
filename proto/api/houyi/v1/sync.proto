syntax = "proto3";

package api.houyi.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "houyi/common/strategy.proto";
import "houyi/common/datasource.proto";

option go_package = "github.com/moon-monitor/moon/pkg/api/houyi/v1;v1";

service Sync {
  rpc MetricStrategy (MetricStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/metric"
      body: "*"
    };
  }

  rpc CertificateStrategy (CertificateStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/certificate"
      body: "*"
    };
  }

  rpc ServerPortStrategy (ServerPortStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/server-port"
      body: "*"
    };
  }

  rpc HttpStrategy (HttpStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/http"
      body: "*"
    };
  }

  rpc PingStrategy (PingStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/ping"
      body: "*"
    };
  }

  rpc EventStrategy (EventStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/event"
      body: "*"
    };
  }

  rpc LogsStrategy (LogsStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/logs"
      body: "*"
    };
  }

  rpc RemoveStrategy (RemoveStrategyRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/remove"
      body: "*"
    };
  }

  rpc MetricDatasource(MetricDatasourceRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/datasource-metric"
      body: "*"
    };
  }

  rpc LogsDatasource(LogsDatasourceRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/datasource-logs"
      body: "*"
    };
  }

  rpc EventDatasource(EventDatasourceRequest) returns (SyncReply) {
    option (google.api.http) = {
      post: "/v1/sync/datasource-event"
      body: "*"
    };
  }
}

message MetricStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.MetricStrategyItem strategies = 2;
}
message CertificateStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.CertificateStrategyItem strategies = 2;
}
message ServerPortStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.ServerPortStrategyItem strategies = 2;
}
message HttpStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.HttpStrategyItem strategies = 2;
}
message PingStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.PingStrategyItem strategies = 2;
}
message EventStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.EventStrategyItem strategies = 2;
}
message LogsStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  houyi.common.LogsStrategyItem strategies = 2;
}
message RemoveStrategyRequest {
  google.protobuf.Timestamp syncTime = 1;
  repeated houyi.common.RemoveStrategyItem strategies = 2;
}

message MetricDatasourceRequest {
  repeated common.MetricDatasourceItem items = 1;
}

message LogsDatasourceRequest {
  repeated common.LogDatasourceItem items = 1;
}

message EventDatasourceRequest {
  repeated common.EventDatasourceItem items = 1;
}

message SyncReply {
  int32 code = 1;
  string message = 2;
}
